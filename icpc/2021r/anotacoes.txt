maratona regional sbc 2020

de longe nossa pior prova. albertini doente e eu apanhando pra implementar. preciso fazer mais problemas no geral.

a: [0]
! parece um pouco de dp e matematica. nao sei, nao li direito.
& 

b: [0] 
! nao sei direito. mal li. alguma bizarrice de string.
& suffix automaton ou sei la. loucura de string que nao estudei ainda.

c: [0]
! nao parece tao absurdo. alguma coisa com teoria dos numeros. ir somando e achando mod, sei la. fiz uma que era de bigint e podia ser resolvida de um jeito parecido (achar se um num ate 1e100 era divisivel por tres somando cada um dos digitos). acho que eh alguma coisa nessa linha.
& uma malandragem louca pra divisibilidade. 

d: [0]
! nao sei direito tambem. acho que uma dp em grafo. eu nao li de verdade.
& nao era tao louco, mas nao saberia fazer mesmo. variacao maneira de dsu com guloso.

e: [1]
! tosco a gente nao ter feito. algum erro de implementacao do ale que ele nao conseguiu descobrir o erro.
& sem mais muitos comentarios mesmo. era so adhoc mesmo.

f: [0]
! quase certeza que eh linesweep. eu vou dar uma olhada nisso durante a semana.
& muito maneiro. linesweep mesmo. eu tinha notado que comecava assim, e que seria outro trabalho definir quai areas escolher. acaba que vale a pena construir uma arvore pra buscar a resposta, tipo: poligono a -> polignono b se b esta contido em a. dai acho que basta achar o diametro dessa arvore, ou uma solucao de dp que o mano descreveu um pouco mais complexa.

g: [1]
! criei um bruteforce pra tentar achar um padrao mas achei foi porra nenhuma. eh claro que um 'a' aumenta em dois na quantidade possibilidades, e que um b so mantem ate onde foi feito. mas sei la. acho que faltou descer mais afundo em como de fato montar os numeros e dai ficava mais evidente porque era impossviel formar alguns. devia ter analisado tipo que numero consigo gerar fazendo 'aba' ou permutacoes de pequenos valores.
& talvez um dos exercicios mais bonitos que ja vi. nao sei como nao notei a relacao quando fiz o bruteforce, mas: se, quando olhando pra uma posicao 'a' num treino, eu consigo olhar contar uma vez a mais em #'a' + 2 e # 'a' + 1, existe uma sequencia de fibbonacci nessa porra. quando eu vi que 'aaab' era o do 8 e 'aaaab' era 13, achei que tinha calculado errado (ja que o a me gerava 2 novos caminhos achei que n('a')b gerava 2^n treinos, e nao um fibbonacci. dai a outra malandragem eh notar que tu consegue gerar treinos juntado n('a')b, ja que esses eram os melhores lexicograficamente. e que juntar um n1('a')b com um n2('a')b me da #n1 * #n2. genial paizao. so fatorar com os numeros do fibbonacci e ja era. por isso n eh tao grande.

h: [2]
! nada demais.
& nada demais.

i: [0]
! tambem dp com grafo eu acho. talvez hld nao sei. a real eh que o que eu mais preciso ver eh dp. cant keep running awaaaaay.
& bem maneiro. nao tinha muito de dp.o n era baixo entao n^4 passava. a solucao que a moca do video fala e justamente essa n^4. tu testa define i como sendo necessariamente uma folha e j como sendo o pai (e => unica conexao) dessa folha. dai o resto nao pode estar conectado com i e pode com jota. entao tu so inverte fosse haver alguma ligacao com a folha. dai o que sobrar voce testa se eh uma arvore e isso eh n^2 normalmente. for i e for j e testar se o resto eh arvore entao n^4. so tem que tomar cuidado pra nao contar duas vezes a mesma arvore. ela falou tambem que tem como provar que a resposta eh no max 2n, entao dava pra brutar com backtracking que passava. o lance do mod faz tu nao querer fazer isso e eh bem obvio que num cenario normal nao passaria. faltou bolas talvez.

j: [1]
! sei que eh dp mas nao parece tao louca. valores baixos dava quase pra fazer com recursao. nunca tinha visto nada parecido entao fiquei com medo.
& na real nao era dp e era bem louca. era um problema de fluxo mas nao um dos mais conhecidos. bizarro. ouvi a explicacao da moca mas nunca vi nada de fluxo entao tava ouvindo arabe. 

k: [2]
! suavasso. maior intervalo em uma sequencia.
& suavasso.

l: [0]
! string tambem. palhacada de palindromo mas eh do tipo que parece ser resolvido com malandragem de bitmask.
& muito louco. se o uma sequencia de chars sao palindromo, tu consegue dizer que sempre o primeiro tem que ser igual o ultimo. se voce ligar todos esses chars em um grafo, dai tu garante que cada componente conexo tem que ter o mesmo valor, e dai eh facil contar de quantos jeitos voce consegue variar esses valores. louco. e ainda tem uma malandragem bizarra encima pra nao ter que juntar todo char com todo char, ja que o n eh 1e5 e isso nao passaria.

m: [1]
! frustrante, achei que era trivial mas nao. a solucao obvia eh muito lenta, e eu nao soube otimizar a escolha do proximo monarca. muita gente fez entao talvez seja um problema conhecido.
& na real estavamos no caminho certo e a solucao seguia muito do que era a nossa ideia. o unico problema era que eu tava olhando varias vezes pra filhos ja mortos naquele for (i : filhos), sendo que eu ja sabia que alguns deles estavam mortos. achei que dando erase no set resolveria esse problema, mas dai talvez o log em cada pesquisa que fodesse ja que o tl era baixo. acho que conseguiria se tivesse pensado melhor no porque de estar tomando o tle, mas na hora eu ja tava de saco cheio.

n: [1]
! bem frustrante tambem. acho que eh segtree. alias, simplificando o problema: quantidade de valores maiores que c em um segmento, mas esse check nao pode ser o(n). nao consegui implementar a segtree, por mais que tenha chegado perto e ganhado um pouco de experiencia comparado com antes. sei que tem a ver com seguir com a query mesmo depois de achar um pedaco dentro de l e r, ja que o pedaco tem que tambem ter min(seg) >= x que quero. apanhei pra aplicar essa ideia, mas acho que eh seguindo dela que tu resolve.
& o maluco falou que era tranquilo com arvore de fenwick, ja que dava pra ordenar pelo x os valores das queries. ele falou que persistent segtree resolvia tambem, ja com essa ideia de ordenacao.

